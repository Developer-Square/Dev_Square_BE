components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        name:
          type: string
        role:
          type: string
          enum: [user, admin]
        skills:
          type: array
        status:
          type: string
          enum: [available, busy]
      example:
        id: 5ebac534954b54139806c112
        email: fake@example.com
        name: fake name
        role: user
        skills: [JS, PHP, Java]
        status: available
    
    Task:
      type: object
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
        price:
          type: number
        difficulty:
          type: string
          enum: [beginner, intermediate, expert]
      example:
        title: Node Backend
        category: JavaScript
        description: A node backend for a taxi hailing company blah blah blah
        price: 50000
        difficulty: intermediate

    Portfolio:
      type: object
      properties:
        title:
          type: string
        category:
          type: string
        description:
          type: string
        link:
          type: string
        gallery:
          type: array
      example:
        title: Node Backend
        category: JavaScript
        description: A node backend for a taxi hailing company blah blah blah
        link: http://asampleproject.com
        gallery: [http://image1.com, http://image2.com]

    Client:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        projectName:
          type: string
        dueDate:
          type: date
        stack:
          type: array
      example:
        name: RylaTech
        description: Backend for mobile app
        projectName: Node BE for Mobile app
        dueDate: '2021-05-18T16:00:00Z'
        stack: [node, mongoDB]

    Token:
      type: object
      properties:
        token:
          type: string
        expires:
          type: string
          format: date-time
      example:
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWJhYzUzNDk1NGI1NDEzOTgwNmMxMTIiLCJpYXQiOjE1ODkyOTg0ODQsImV4cCI6MTU4OTMwMDI4NH0.m1U63blB0MLej_WfB7yC2FTMnCziif9X8yzwDEfJXAg
        expires: 2020-05-12T16:18:04.793Z
    
    TaskList:
      type: object
      properties:
        tasks:
          type: array
      example:
        tasks: [5ebac534954b54139806c112, 5ebac534954b54139806c113, 5ebac534954b54139806c112]

    AuthTokens:
      type: object
      properties:
        access:
          $ref: '#/components/schemas/Token'
        refresh:
          $ref: '#/components/schemas/Token'

    Error:
      type: object
      properties:
        code:
          type: number
        message:
          type: string

  responses:
    DuplicateEmail:
      description: Email already taken
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 400
            message: Email already taken
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 401
            message: Please authenticate
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 403
            message: Forbidden
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 404
            message: Not found

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
